@startuml
!pragma layout smetana
skin rose

package cl.ucn.disc.pa.sinv {
    package utils {
        class InstrumentSerializerHelper {

            - InstrumentSerializerHelper()

            + constructInstrument(registro: Registro): Instrument
            + constructPersecussionInstrument(type: String, registro: Registro): Instrument
            + constructWindInstrument(type: String, registro: Registro): Instrument
            + constructStringInstrument(type: String, registro: Registro): Instrument
            + constructRegistro(instrument: Instrument): Instrument
        }

        class PaginatorInstrument {
            - elements: Instruments[]
            - maxInPage: int

            + PaginatorInstrument(elements: Intruments[], maxInPage: int)
            + search(page: int): Instrument[]
        }
    }

    package read {
        interface InstrumentReader {
            + next() : Instrument
            + hasNext(): boolean
        }

        class CvsInstrumentReader {
            - fileName : String
            - fileManager : ArchivoEntrada

            - open()
        }
    }

    package write {

        interface InstrumentWriter {
            + save(instrument : Instrument): void
        }

        class CvsInstrumentWriter {
            - out: Out
            - fileName: String

            CvsInstrumentWriter(fileName : String)
        }


    }

    package service {
        interface SystemSINV {
            + fill(fileName : String) : void
            + sellInstrument(code : String) : Ticket
            + searchInstrumentByCode(code : String) : Instrument
            + searchInstrumentByType() : Instrument[]
            + searchInstrumentByName(name : String) : Instrument[]
            + getInstruments() : Instrument[]
        }

        class DefaultSystemSINV {
            - instrumentReader: InstrumentReader
            - instruments: Instrument[]

            + DefaultSystemSINV(instrumentReader : InstrumentReader)

        }

    }

    package model {
        class Instrument {
            - stockAvailable : int
            - code: String
            - price: int
            - type: String
            - name: String
            - material: String

            + Instrument(stockAvailable: int, code: String, price: int,
             type: String, name: String, material: String)
            + hasStock() : boolean
            + removeStock() : void
            + getStock() : int
            + getCode(): String
            + getPrice(): int
            + getType(): String
            + getName(): String
            + getMaterial(): String
            - setStock(stock : int): int
            + show(): void
            + toString(): String

        }

        class StringInstrument {
            - typeString: String
            - typeStringInstrument: String
            - numberString: int

            + StringInstrument(stockAvailable: int, code: String, price: int, type: String, name: String,
            material: StringtypeString: String, typeStringInstrument: String, numbreString: int)
            + getTypeString(): String
            + getTypeStringInstrument(): String
            + getNumberString() int
            + setTypeString(TypeString: String): void
            + show(): void
            + toString(): String
        }

        class WindInstrument {

            + WindInstrument(stockAvailable: int, code: String, price: int,
                                          type: String, name: String, material: String)


        }

        class PercussionInstrument {
            - typePercussion: String
            - altitude: String

            + PercussionInstrument(stockAvailable: int, code: String, price: int,
                                   type: String, name: String, material: String,
                                   typePersecussion: String, altitude: String)
            + getTypePercussion(): String
            + getAltitude(): String
            + setAltitude(altitude: String): void
            + show(): void
            + toString(): String
        }

        interface Showable {
            + show(instrument: Instrument): void
        }

        class Ticket {
            - sellInstrument: String
            - price: int

            + Ticket(sellInstrument: String, price: int)
            + getSellInstrument(): String

        }

    }

}

Instrument ..|> Showable
Ticket ..|> Showable
WindInstrument --|> Instrument
StringInstrument --|> Instrument
PercussionInstrument --|> Instrument

DefaultSystemSINV ..|> SystemSINV

CvsInstrumentWriter ..|> InstrumentWriter

CvsInstrumentReader ..|> InstrumentReader

SystemSINV --* Instrument
SystemSINV --* InstrumentWriter
SystemSINV --* InstrumentReader

@enduml